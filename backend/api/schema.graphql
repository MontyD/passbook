type Mutation {
    login(email: String!, password: String!): Token!
    refreshToken(refreshId: ID!, refreshToken: String!): Token!

    createUser(userCreate: UserCreate!): User!
    createOrganisation(organisationCreate: OrganisationCreate!): Organisation!
}

type Query {
    listUsers(limit: Int!, offset: Int): UserList!
    listOrganisations(limit: Int!, offset: Int): OrganisationList!
}

type Token {
    jwt: String!
    jwtExpiresIn: Int!
    refreshToken: RefreshToken!
    user: User!
}

type RefreshToken {
    id: ID!
    token: String!
}

enum UserStatus {
    ACTIVE
    EMAIL_VERIFICATION_PENDING
    PASSWORD_FAILED
    PASSWORD_UPDATE_PENDING
    LOCKED
}

enum AvailablePermissions {
    ADMINISTER_ORGANISATIONS
    ADMINISTER_LOCATIONS
    ADMINISTER_USERS
}

type Permission {
    name: AvailablePermissions!
    all: Boolean
    organisation: String
}

input PermissionCreate {
    name: AvailablePermissions!
    all: Boolean
    organisation: String
}

type User {
    id: ID!
    status: UserStatus!
    email: String!
    fullName: String!
    shortName: String!
    permissions: [Permission]!
    organisation: ID
}

input UserCreate {
    status: UserStatus!
    email: String!
    fullName: String!
    shortName: String!
    password: String!
    permissions: [PermissionCreate!]!
    organisation: ID
}

type UserList {
    total: Int!
    data: [User!]!
}

enum OrganisationStatus {
    ACTIVE
    LOCKED
}

enum DataType {
    FREE_TEXT
    EMAIL
    PHONE_NUMBER
}

type DataToCapture {
    name: String!
    label: String!
    type: DataType!
}

input DataToCaptureCreate {
    name: String!
    label: String!
    type: DataType!
}

type Organisation {
    id: ID!
    name: String!
    status: OrganisationStatus!
    dataToCapture: [DataToCapture!]!
}

input OrganisationCreate {
    name: String!
    dataToCapture: [DataToCaptureCreate!]!
}

type OrganisationList {
    total: Int!
    data: [Organisation!]!
}
